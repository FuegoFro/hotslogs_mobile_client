import 'dart:math';import 'package:cached_network_image/cached_network_image.dart';import 'package:flutter/material.dart';import 'package:hotslogs_mobile_client/list_utils.dart';import 'package:hotslogs_mobile_client/talent_builds_common.dart';import 'package:hotslogs_mobile_client/talent_builds_stats_server.dart';class HeroDetailsState extends State<HeroDetails> {  List<TalentBuild> _talentBuilds;  @override  void initState() {    super.initState();    _loadTalentBuild(widget.heroName);  }  void _loadTalentBuild(String heroName) async {    final talentBuilds = await getBuildsForHeroFromStatsServer(heroName);    setState(() {      _talentBuilds = talentBuilds;    });  }  @override  Widget build(BuildContext context) => Scaffold(        appBar: AppBar(          title: Text("Talent builds - ${widget.heroName}"),        ),        body: _buildBody(),      );  Widget _buildBody() {    if (_talentBuilds == null) {      return Center(child: CircularProgressIndicator());    } else if (_talentBuilds.length == 0) {      return Center(        child: Padding(          padding: EdgeInsets.all(8.0),          child: Text(            "No talent builds for Hero. It's possible there was recently a "                "patch, which would cause data to be limited.",            style: TextStyle(color: Colors.grey),            textAlign: TextAlign.center,          ),        ),      );    } else {      var maxWinPercent = double.negativeInfinity;      var minWinPercent = double.infinity;      var maxGameCount = double.negativeInfinity;      var minGameCount = double.infinity;      for (final build in _talentBuilds) {        maxWinPercent = max(build.winPercent, maxWinPercent);        minWinPercent = min(build.winPercent, minWinPercent);        maxGameCount = max(build.gameCount.toDouble(), maxGameCount);        minGameCount = min(build.gameCount.toDouble(), minGameCount);      }      return ListView.builder(        itemBuilder: itemBuilderWithDividers((context, index) => _buildListItem(              _talentBuilds[index],              index,              minWinPercent,              maxWinPercent,              minGameCount,              maxGameCount,            )),        itemCount: itemCountWithDividers(_talentBuilds.length),      );    }  }  Widget _buildListItem(      TalentBuild talentBuild,      int index,      double minWinPercent,      double maxWinPercent,      double minGameCount,      double maxGameCount) {    return Padding(      padding: EdgeInsets.all(8.0),      child: Column(        key: Key("Build column"),        children: <Widget>[          _buildStatsBars(            talentBuild,            minWinPercent,            maxWinPercent,            minGameCount,            maxGameCount,          ),          VertSpace(),          Row(            mainAxisAlignment: MainAxisAlignment.spaceEvenly,            crossAxisAlignment: CrossAxisAlignment.start,            children: intersperseDivider(              talentBuild                  .mapTalents((talent) => _buildTalentCell(talent))                  .toList(),              HorizSpace(),            ),          ),        ],      ),    );  }  Row _buildStatsBars(TalentBuild talentBuild, double minWinPercent,      double maxWinPercent, double minGameCount, double maxGameCount) {    return Row(      key: Key("Stats container"),      children: <Widget>[        Expanded(          child: _makeLabelledProgressBar(            Colors.green,            "${talentBuild.winPercent.toStringAsFixed(1)}%",            talentBuild.winPercent,            minWinPercent,            maxWinPercent,          ),        ),        HorizSpace(),        Expanded(            child: _makeLabelledProgressBar(          Colors.yellow,          "${talentBuild.gameCount}",          talentBuild.gameCount.toDouble(),          minGameCount,          maxGameCount,        )),      ],    );  }  Row _makeLabelledProgressBar(    Color color,    String label,    double value,    double minValue,    double maxValue,  ) {    var progressOutOf100 =        ((value - minValue) / (maxValue - minValue) * 100).toInt();    // Bound between 1 and 99    progressOutOf100 = min(99, max(progressOutOf100, 1));    return Row(      key: Key("Label and bar container - $label"),      children: <Widget>[        Text(label, style: TextStyle(color: color)),        HorizSpace(),        Expanded(          flex: 8,          child: Container(            height: 5.0,            child: Row(              key: Key("Bar container - $label"),              children: <Widget>[                Expanded(                  flex: progressOutOf100,                  child: Container(                    key: Key("Progress bar - $label"),                    color: color,                  ),                ),                Spacer(flex: (100 - progressOutOf100)),              ],            ),          ),        )      ],    );  }  Widget _buildTalentCell(Talent talent) => Expanded(        child: Column(          children: <Widget>[            AspectRatio(                aspectRatio: 1.0,                child: talent == null ? null : CachedNetworkImage(                  fadeInDuration: Duration(milliseconds: 100),                  imageUrl: talent.imageUrl,                )),            VertSpace(),            Text(              talent == null ? "" : talent.name,              style: TextStyle(fontSize: 8.0),              textAlign: TextAlign.center,            ),          ],        ),      );}class HeroDetails extends StatefulWidget {  final String heroName;  const HeroDetails(this.heroName, {Key key}) : super(key: key);  @override  State<HeroDetails> createState() {    return HeroDetailsState();  }}